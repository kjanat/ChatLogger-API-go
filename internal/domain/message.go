package domain

import (
	"encoding/json"
	"errors"
	"time"
)

// MessageRole represents the role of the message sender.
type MessageRole string

// Message role constants define the possible roles for a chat message.
const (
	// MessageRoleUser represents a message sent by the user/client.
	MessageRoleUser MessageRole = "user"
	// MessageRoleAssistant represents a message generated by the AI assistant.
	MessageRoleAssistant MessageRole = "assistant"
	// MessageRoleSystem represents a system message providing context or instructions.
	MessageRoleSystem MessageRole = "system"
)

// IsValid checks if the message role is valid.
func (r MessageRole) IsValid() bool {
	switch r {
	case MessageRoleUser, MessageRoleAssistant, MessageRoleSystem:
		return true
	}

	return false
}

// MessageMetadata represents extended information about a message.
type MessageMetadata struct {
	TokenCount   int     `json:"token_count,omitempty"`
	ResponseTime float64 `json:"response_time,omitempty"` // In milliseconds
	// Add other message-specific metadata fields here if needed
}

// Message represents a single message in a chat.
type Message struct {
	ID        uint64      `gorm:"primaryKey"         json:"id"`
	ChatID    uint64      `gorm:"not null"           json:"chat_id"`
	Role      MessageRole `gorm:"size:20;not null"   json:"role"`
	Content   string      `gorm:"type:text;not null" json:"content"`
	Metadata  string      `gorm:"type:jsonb"         json:"metadata"` // Store MessageMetadata as JSON string
	CreatedAt time.Time   `                          json:"created_at"`
}

// GetMetadata parses the JSON metadata string into the MessageMetadata struct.
func (m *Message) GetMetadata() (*MessageMetadata, error) {
	var metadata MessageMetadata
	if m.Metadata == "" || m.Metadata == "null" {
		return &metadata, nil // Return empty struct if no metadata
	}
	err := json.Unmarshal([]byte(m.Metadata), &metadata)
	return &metadata, err
}

// SetMetadata converts the MessageMetadata struct into a JSON string.
func (m *Message) SetMetadata(metadata *MessageMetadata) error {
	if metadata == nil {
		m.Metadata = "{}" // Store empty JSON object if nil
		return nil
	}
	metadataJSON, err := json.Marshal(metadata)
	if err != nil {
		return err
	}
	m.Metadata = string(metadataJSON)
	return nil
}

// Validate performs validation on the message structure.
func (m *Message) Validate() error {
	if !m.Role.IsValid() {
		return errors.New("invalid message role, must be 'user', 'assistant', or 'system'")
	}

	if m.Content == "" {
		return errors.New("message content cannot be empty")

	}

	return nil
}

// MessageRepository defines the interface for message data operations.
type MessageRepository interface {
	Create(message *Message) error
	FindByID(id uint64) (*Message, error)
	FindByChatID(chatID uint64) ([]Message, error)
	CountByOrgIDAndDateRange(orgID uint64, start, end time.Time) (int64, error)
	GetRoleStats(orgID uint64) (map[MessageRole]int64, error)
	// Remove or update methods related to deprecated fields if they exist
	// GetLatencyStats(orgID uint64) (map[string]float64, error)  // min, max, avg
	// GetTokenCountStats(orgID uint64) (map[string]int64, error) // total, avg
}

// MessageService defines the interface for message business logic.
type MessageService interface {
	CreateMessage(message *Message) error
	GetByID(id uint64) (*Message, error)
	GetByChatID(chatID uint64) ([]Message, error)
	// Analytics methods for messages
	GetMessageStats(orgID uint64, start, end time.Time) (map[string]interface{}, error)
}

name: Docker
description: Build and push Docker images
inputs:
  PACKAGE:
    required: true
    description: 'Package to build'
  IMAGE_PREFIX:
    required: true
    description: 'Prefix for the image name'
  PLATFORMS:
    required: true
    description: 'List of platforms to build for'
outputs:
  digest: ${{ steps.push.outputs.digest }}
  tags: ${{ steps.meta.outputs.tags }}
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3.8.2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version components
      id: version
      uses: ./.github/actions/get_version
      with:
        version-file: internal/version/version.go

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
          ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
        tags: |
          # latest vs nightly
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }},priority=1000
          type=schedule,pattern=nightly,enable=${{ github.ref == format('refs/heads/{0}', 'development') }},priority=1000

          # version (semver) vs version-date
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version-no-v }},enable=${{ !startsWith(github.ref, 'refs/tags/v') }},priority=900
          type=schedule,pattern={{date 'YYYYMMDD-hhmmss' tz='Europe/Amsterdam'}},prefix=${{ steps.version.outputs.version-no-v }}-,enable=${{ github.ref != format('refs/heads/{0}', 'master') || github.event_name == 'schedule' }},priority=900

          # version (semver, magjor/major+minor) if major version is not 0
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0') }},priority=800
          type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0') }},priority=700
          type=semver,pattern={{major}}.{{minor}}.{{patch}},enable=${{ !startsWith(github.ref, 'refs/tags/v0') }},priority=600

          # sha
          type=sha,enable=true,format=short,priority=100
        labels: |
          org.opencontainers.image.created=${{ steps.version.outputs.commit-date }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.url=https://github.com/users/kjanat/packages/container/package/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
          org.opencontainers.image.documentation=https://chatlogger-api-docs.kjanat.com/
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.version=${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}-${{ steps.version.outputs.version-no-v }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.vendor=${{ github.event.repository.owner.login }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          org.opencontainers.image.ref.name=${{ github.ref_name }}
          org.opencontainers.image.title=${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
          org.opencontainers.image.description='${{ github.event.repository.description }}'
          org.opencontainers.image.base.name=ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}:${{ steps.version.outputs.version-no-v }}

    - name: Build and push multi-arch image
      id: push
      uses: docker/build-push-action@v6
      env:
        GIN_MODE: release
        SOURCE_DATE_EPOCH: ${{ steps.version.outputs.timestamp }}
      with:
        context: .
        file: .github/actions/docker/Dockerfile.${{ inputs.PACKAGE }}
        platforms: ${{ inputs.PLATFORMS }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.labels }}
        build-contexts: |
          golang:1.24.2=docker-image://golang:${{ steps.version.outputs.GO_VERSION }}
        build-args: |
          VERSION=${{ steps.version.outputs.version-no-v }}
          BUILD_TIME=${{ steps.version.outputs.commit-date }}
          GIT_COMMIT=${{ github.sha }}
          GIT_TAG=${{ github.ref_name }}
          GIT_BRANCH=${{ github.ref }}
          LD_FLAGS=-s -w -X github.com/kjanat/chatlogger-api-go/internal/version.Version=${{ steps.version.outputs.version-no-v }} -X github.com/kjanat/chatlogger-api-go/internal/version.BuildTime=${{ steps.version.outputs.commit-date }} -X github.com/kjanat/chatlogger-api-go/internal/version.GitCommit=${{ github.sha }}
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ github.event.repository.description }}
        cache-from: type=gha,mode=max,scope=buildx-${{ github.ref_name }},tags=ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}:cache
        cache-to: type=gha,mode=max,scope=buildx-${{ github.ref_name }},tags=ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}:cache

    - name: Attest GitHub Container Registry image
      if: steps.push.outputs.digest != ''
      uses: actions/attest-build-provenance@v2
      id: attest_ghcr
      with:
        subject-name: ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

    - name: Attest DockerHub image
      if: steps.push.outputs.digest != ''
      uses: actions/attest-build-provenance@v2
      id: attest_dockerhub
      with:
        subject-name: index.docker.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

    - name: Sign the published Docker images
      if: steps.push.outputs.digest != '' && github.event_name != 'pull_request'
      id: sign
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.push.outputs.digest }}
      shell: bash
      run: |
        echo "Signing digest: ${DIGEST}"
        echo "Tags: ${TAGS}"
        images_to_sign=""
        IFS=$'\n'
        for tag in ${TAGS}; do
          if [[ -n "$tag" ]]; then
            images_to_sign+="${tag}@${DIGEST} "
          fi
        done
        unset IFS

        echo "Images to sign: ${images_to_sign}"
        if [[ -n "$images_to_sign" ]]; then
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images_to_sign}
        else
          echo "No images to sign."
        fi

    - name: Check images and verify signatures
      if: steps.push.outputs.digest != '' && github.event_name != 'pull_request'
      continue-on-error: true
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.push.outputs.digest }}
      shell: bash
      run: |
        echo "Verifying digest: ${DIGEST}"
        echo "Verifying tags: ${TAGS}"
        verification_failed=false
        IFS=$'\n'
        for tag in ${TAGS}; do
          if [[ -n "$tag" ]]; then
            echo "--- Verifying image: $tag ---"
            cosign verify-attestation --key cosign.pub $tag@${DIGEST}
            if [ $? -ne 0 ]; then
              echo "::warning::Provenance verification failed for $tag@${DIGEST}"
              verification_failed=true
            fi
            cosign verify --key cosign.pub $tag@${DIGEST}
            if [ $? -ne 0 ]; then
              echo "::warning::Signature verification failed for $tag@${DIGEST}"
              verification_failed=true
            else
              echo "Signature verified successfully for $tag@${DIGEST}"
            fi
          fi
        done
        unset IFS

        if [[ "$verification_failed" == true ]]; then
          echo "::error::One or more image verifications failed."
        else
          echo "All image verifications successful."
        fi

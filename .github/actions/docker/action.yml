name: Docker
description: Build and push Docker images
inputs:
  PACKAGE:
    required: true
    description: 'Package to build'
  IMAGE_PREFIX:
    required: true
    description: 'Prefix for the image name'
  PLATFORMS:
    required: true
    description: 'List of platforms to build for'
  CACHE_FROM:
    required: false
    description: 'Cache source for Docker build'
    default: 'type=gha,mode=max'
  CACHE_TO:
    required: false
    description: 'Cache destination for Docker build'
    default: 'type=gha,mode=max'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3.8.2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version components
      id: version
      uses: ./.github/actions/get_version
      with:
        version-file: internal/version/version.go

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
          ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
        tags: |
          # latest vs nightly
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }},priority=1000
          type=schedule,pattern=nightly,enable=${{ github.ref == format('refs/heads/{0}', 'development') }},priority=1000

          # version (semver) vs version-date
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version-no-v }},enable=${{ !startsWith(github.ref, 'refs/tags/v') }},priority=900
          type=schedule,pattern={{date 'YYYYMMDD-hhmmss' tz='Europe/Amsterdam'}},prefix=${{ steps.version.outputs.version-no-v }}-,enable=${{ github.ref != format('refs/heads/{0}', 'master') || github.event_name == 'schedule' }},priority=900

          # version (semver, magjor/major+minor) if major version is not 0
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0') }},priority=800
          type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0') }},priority=700
          type=semver,pattern={{major}}.{{minor}}.{{patch}},enable=${{ !startsWith(github.ref, 'refs/tags/v0') }},priority=600

          # sha
          type=sha,enable=true,format=short,priority=100
        labels: |
          org.opencontainers.image.created=${{ steps.version.outputs.commit-date }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.url=https://github.com/users/kjanat/packages/container/package/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
          org.opencontainers.image.documentation=https://chatlogger-api-docs.kjanat.com/
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.version=${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}-${{ steps.version.outputs.version-no-v }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.ref.name=${{ github.ref_name }}
          org.opencontainers.image.title=${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
          org.opencontainers.image.description='ChatLogger API'
          org.opencontainers.image.base.name=ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}:${{ steps.version.outputs.version-no-v }}

    - name: Build and push multi-arch image
      id: push
      uses: docker/build-push-action@v6
      env:
        GIN_MODE: release
        SOURCE_DATE_EPOCH: ${{ steps.version.outputs.timestamp }}
      with:
        context: .
        file: .github/actions/docker/Dockerfile.${{ inputs.PACKAGE }}
        platforms: ${{ inputs.PLATFORMS }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.labels }}
        build-contexts: |
          golang:1.24.2=docker-image://golang:${{ steps.version.outputs.go-version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version-no-v }}
          BUILD_TIME=${{ steps.version.outputs.build-date }}
          GIT_COMMIT=${{ github.sha }}
          GIT_TAG=${{ github.ref_name }}
          GIT_BRANCH=${{ github.ref }}
          LD_FLAGS=-s -w -X github.com/kjanat/chatlogger-api-go/internal/version.Version=${{ steps.version.outputs.version-no-v }} -X github.com/kjanat/chatlogger-api-go/internal/version.BuildTime=${{ steps.version.outputs.build-date }} -X github.com/kjanat/chatlogger-api-go/internal/version.GitCommit=${{ github.sha }}
        outputs: type=image,name=target
        cache-from: ${{ inputs.CACHE_FROM }}
        cache-to: ${{ inputs.CACHE_TO }}

    - name: Attest GitHub Container Registry image
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v2
      id: attest_ghcr
      with:
        subject-name: ghcr.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
        subject-digest: ${{ github.sha }}
        push-to-registry: true

    - name: Attest DockerHub image
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v2
      id: attest_dockerhub
      with:
        subject-name: index.docker.io/kjanat/${{ inputs.IMAGE_PREFIX }}-${{ inputs.PACKAGE }}
        subject-digest: ${{ github.sha }}
        push-to-registry: true

    - name: Sign the published Docker images
      if: github.event_name != 'pull_request'
      id: sign
      shell: bash
      run: |
        for tag in $(echo "$TAGS" | tr ',' '\n'); do
          if [[ -n "$tag" ]]; then
            cosign sign --yes $tag@$DIGEST
          fi
        done
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ github.sha }}

    - name: Check images and verify signatures
      if: github.event_name != 'pull_request'
      continue-on-error: true
      shell: bash
      run: |
        for tag in $(echo "$TAGS" | tr ',' '\n'); do
          if [[ -n "$tag" ]]; then
            echo "--- Verifying image: $tag ---"
            cosign verify-attestation $tag@$DIGEST
            cosign verify $tag@$DIGEST
          fi
        done
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ github.sha }}
# Build Stage
FROM golang:latest-alpine AS builder

ARG LD_FLAGS

WORKDIR /src
COPY go.mod go.sum ./
# If 32-bit architecture, change the version of gorm.io/gorm to v1.25.12
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "i686" ] || [ "$ARCH" = "armv7l" ] || [ "$ARCH" = "armv6l" ]; then \
        echo "32-bit architecture detected ($ARCH), changing gorm version to v1.25.12"; \
        go mod edit -require gorm.io/gorm@v1.25.12; \
        # # Also explicitly downgrade the postgres driver to be compatible
        # go mod edit -require gorm.io/driver/postgres@v1.5.4; \
        # Add replace directive to ensure the version is enforced
        go mod edit -replace gorm.io/gorm=gorm.io/gorm@v1.25.12; \
    else \
        echo "Not a 32-bit architecture ($ARCH), using default gorm version"; \
    fi
# Tidy up dependencies based on the potentially modified go.mod *before* downloading
RUN go mod tidy
# Download dependencies based on the tidied go.mod
RUN go mod download
# Verify GORM version for debugging
RUN go list -m gorm.io/gorm
COPY . .
# Build the server binary for linux
RUN go build \
-ldflags="${LD_FLAGS}" \
-o /out/server \
./cmd/server

# Final Stage
FROM alpine:3.21.3

WORKDIR /app
ENV GIN_MODE=release
COPY docs /app
COPY --from=builder /out/server /usr/local/bin/chatlogger-server

EXPOSE 8080

ENTRYPOINT [ "chatlogger-server" ]

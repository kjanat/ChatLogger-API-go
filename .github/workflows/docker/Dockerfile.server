# Build Stage
FROM golang:latest-alpine AS builder

ARG LD_FLAGS

WORKDIR /src

# Copy all files to ensure we have dependencies
COPY cmd/ docs/ internal/ go.mod go.sum LICENSE README.md ./

# If 32-bit architecture, change the version of gorm.io/gorm to v1.25.12
RUN ARCH=$(uname -m) && \
	if [ "$ARCH" = "i686" ] || [ "$ARCH" = "armv7l" ] || [ "$ARCH" = "armv6l" ]; then \
		echo "32-bit architecture detected ($ARCH), changing gorm version to v1.25.12"; \
		go get -u gorm.io/gorm@v1.25.12 || true; \
		go mod edit -require gorm.io/gorm@v1.25.12; \
		go mod edit -replace=gorm.io/gorm=gorm.io/gorm@v1.25.12; \
		go mod tidy; \
	else \
		echo "Not a 32-bit architecture ($ARCH), using default gorm version"; \
	fi

# For better diagnosis
RUN apk add --no-cache grep && \
	go mod graph | grep -i gorm || echo "No direct GORM dependencies found"

RUN cat go.mod

# Verify GORM version being used
RUN go list -m all | grep -i gorm || echo "No GORM dependencies found"

# Build the server binary for linux
RUN go build \
	-ldflags="${LD_FLAGS}" \
	-o /out/server \
	./cmd/server

# Final Stage
FROM alpine:3.21.3

WORKDIR /app
ENV GIN_MODE=release
COPY docs /app
COPY --from=builder /out/server /usr/local/bin/chatlogger-server

EXPOSE 8080

ENTRYPOINT [ "chatlogger-server" ]

name: Release

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      build_time:
        required: true
        type: string
      git_commit:
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  IMAGE_NAME: ${{ github.event.repo.name }}
  IMAGE_TAG: ${{ inputs.git_commit }}
  IMAGE_VERSION: ${{ inputs.version }}
  IMAGE_DESCRIPTION: ${{ github.event.repository.description }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true
        
      - name: Setup Cosign
        run: |
          if [[ -n "${{ secrets.COSIGN_PRIVATE_KEY }}" ]]; then
            echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
            echo "COSIGN_PRIV_KEY=cosign.key" >> $GITHUB_ENV
            chmod 600 cosign.key
          else
            # If no private key is supplied, we'll use the cosign.key file in the repo
            if [ -f "cosign.key" ]; then
              echo "COSIGN_PRIV_KEY=cosign.key" >> $GITHUB_ENV
              chmod 600 cosign.key
            fi
          fi

      - name: GoReleaser Release
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.IMAGE_TAG }}
          GORELEASE_CURRENT_RUN: ${{ github.run_id }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ env.IMAGE_VERSION }}
          draft: true
          prerelease: false
          generate_release_notes: true
          files: dist/chatlogger-*,chatlogger-*

  docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker tags
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
            type=sha
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.vendor=${{ github.actor }}
            org.opencontainers.image.url=${{ github.event.repo.url }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.3'

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: true
          DOCKER_BUILD_RECORD_UPLOAD: true
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          # tags: |
          #   ghcr.io/kjanat/chatlogger-api:latest
          #   ghcr.io/kjanat/chatlogger-api:${{ env.IMAGE_VERSION }}
          #   ghcr.io/kjanat/chatlogger-api:${{ env.IMAGE_TAG }}

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   needs: [tag-version, build]
  #   permissions:
  #     contents: write
  #     packages: write
  #     id-token: write
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

name: Build and Release

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref_name }}

jobs:
  tag-version:
    name: Tag Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      created_tag: ${{ steps.create_tag.outputs.created }}
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Version
        id: extract_version
        shell: bash
        run: |
          # Extract version using robust pattern matching with fallback
          VERSION=$(grep -oP 'Version = "\K[^"]+' internal/version/version.go || grep 'Version = ' internal/version/version.go | awk -F'"' '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Create Tag If Needed
        id: create_tag
        run: |
          git fetch --tags
          if git tag | grep -q "^v${{ steps.extract_version.outputs.version }}$"; then
            echo "Tag v${{ steps.extract_version.outputs.version }} already exists"
            echo "created=false" >> $GITHUB_OUTPUT
          else
            echo "Creating tag v${{ steps.extract_version.outputs.version }}"
            git tag "v${{ steps.extract_version.outputs.version }}"
            git push origin "v${{ steps.extract_version.outputs.version }}"
            echo "created=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [tag-version]
    permissions:
      contents: read
    if: ${{ always() && (needs.tag-version.result == 'success' || needs.tag-version.result == 'skipped') }}
    outputs:
      version: ${{ steps.extract_build_info.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Extract Build Info
        id: extract_build_info
        run: |
          VERSION=$(grep -oP 'Version = "\K[^"]+' internal/version/version.go || grep 'Version = ' internal/version/version.go | awk -F'"' '{print $2}')
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=$(git rev-parse HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_ENV
          echo "git_commit=$GIT_COMMIT" >> $GITHUB_ENV
          echo "Version: $VERSION, Build time: $BUILD_TIME, Git commit: $GIT_COMMIT"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml --issues-exit-code=0

      # - name: Run Tests
      #   run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Build Binary
        run: |
          go build -ldflags "-s -w \
            -X github.com/kjanat/ChatLogger-API-go/internal/version.Version=${{ steps.extract_build_info.outputs.version }} \
            -X github.com/kjanat/ChatLogger-API-go/internal/version.BuildTime=${{ env.build_time }} \
            -X github.com/kjanat/ChatLogger-API-go/internal/version.GitCommit=${{ env.git_commit }}" \
            -o chatlogger-api \
            ./cmd/server

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chatlogger-api
          path: chatlogger-api
          retention-days: 5

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [tag-version, build]
    permissions:
      contents: write
      packages: write
      id-token: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,arm'

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.3'

      - name: Setup Cosign
        run: |
          if [[ -n "${{ secrets.COSIGN_PRIVATE_KEY }}" ]]; then
            echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
            echo "COSIGN_PRIV_KEY=cosign.key" >> $GITHUB_ENV
            chmod 600 cosign.key
          else
            # If no private key is supplied, we'll use the cosign.key file in the repo
            if [ -f "cosign.key" ]; then
              echo "COSIGN_PRIV_KEY=cosign.key" >> $GITHUB_ENV
              chmod 600 cosign.key
            fi
          fi

      - name: GoReleaser Release
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
          GORELEASE_CURRENT_RUN: ${{ github.run_id }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

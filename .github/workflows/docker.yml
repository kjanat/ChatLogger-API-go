name: Docker CI/CD

on:
  schedule:
    - cron: "31 11 * * *" # Daily at 11:31 UTC (Coordinated Universal Time)
  push:
    branches: ["master"]
    tags: ["v*.*.*"]
  # pull_request:
  #   branches: ["master"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

# Define platforms list once
env:
  PLATFORMS: linux/arm/v7 #linux/amd64,linux/arm64,,linux/riscv64,linux/ppc64le,linux/arm/v6
  IMAGE_PREFIX: chatlogger-api

jobs:
  build-and-push:
    name: Build & Push '${{ matrix.packages }}'
    runs-on: ubuntu-latest
    strategy:
      # max-parallel: 1
      fail-fast: true
      matrix:
        packages:
          - "worker"
          - "server"
    outputs:
      image_name: ghcr.io/kjanat/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
      digest: ${{ steps.push.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.2
      - name: Check cosign install!
        run: cosign version

      - name: Extract version components
        id: version
        run: |
          VERSION_NO_V=$(grep -oP 'Version = "\K[^"]+' internal/version/version.go)
          VERSION=v$VERSION_NO_V
          MAJOR=$(echo $VERSION_NO_V | cut -d. -f1)
          MINOR=$(echo $VERSION_NO_V | cut -d. -f2)
          COMMIT_DATE=$(git log -1 --format=%cd --date=iso-strict)
          GO_VERSION=$(grep -oP 'go \K[0-9]+(\.[0-9]+)*' go.mod)
          TIMESTAMP=$(git log -1 --pretty=%ct)

          echo "VERSION_NO_V=$VERSION_NO_V" >> "$GITHUB_ENV"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "MAJOR=$MAJOR" >> "$GITHUB_ENV"
          echo "MINOR=$MINOR" >> "$GITHUB_ENV"
          echo "COMMIT_DATE=$COMMIT_DATE" >> "$GITHUB_ENV"
          echo "GO_VERSION=$GO_VERSION" >> "$GITHUB_ENV"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_ENV"

          echo "VERSION_NO_V=$VERSION_NO_V" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "MAJOR=$MAJOR" >> "$GITHUB_OUTPUT"
          echo "MINOR=$MINOR" >> "$GITHUB_OUTPUT"
          echo "COMMIT_DATE=$COMMIT_DATE" >> "$GITHUB_OUTPUT"
          echo "GO_VERSION=$GO_VERSION" >> "$GITHUB_OUTPUT"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"

          echo "Version (no v): $VERSION_NO_V"
          echo "Version:        $VERSION"
          echo "Major:          $MAJOR"
          echo "Minor:          $MINOR"
          echo "Commit date:    $COMMIT_DATE"
          echo "Go version:     $GO_VERSION"
          echo "Timestamp:      $TIMESTAMP"
        shell: bash

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            kjanat/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
            ghcr.io/kjanat/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
          tags: |
            type=semver,pattern={{raw}},priority=9000
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }},priority=1000
            type=schedule,pattern=nightly,enable=${{ github.ref != format('refs/heads/{0}', 'master') && github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v') }},priority=600
            type=semver,pattern={{version}},value=${{ steps.version.outputs.VERSION_NO_V }},priority=900
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }},priority=800
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }},priority=700
            type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }},priority=700
            type=schedule,pattern={{date 'YYYYMMDD-hhmmss' tz='Europe/Amsterdam'}},prefix={{version}}-,enable=${{ github.ref != format('refs/heads/{0}', 'master') }},priority=200
            type=sha,enable=true,format=short,priority=100
            type=ref,event=branch,priority=300
            type=sha,priority=100
          labels: |
            org.opencontainers.image.created=${{ steps.version.outputs.COMMIT_DATE }}
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.url=https://github.com/users/kjanat/packages/container/package/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
            org.opencontainers.image.documentation=https://chatlogger-api-docs.kjanat.com/
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}-${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.event.repository.owner.login }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.title=${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
            org.opencontainers.image.description='${{ github.event.repository.description }}'
            org.opencontainers.image.base.name=ghcr.io/kjanat/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}:${{ steps.version.outputs.VERSION_NO_V }}
          annotations: |
            org.opencontainers.image.created=${{ steps.version.outputs.COMMIT_DATE }}
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.url=https://github.com/users/kjanat/packages/container/package/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
            org.opencontainers.image.documentation=https://chatlogger-api-docs.kjanat.com/
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}-${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.event.repository.owner.login }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.title=${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
            org.opencontainers.image.description='${{ github.event.repository.description }}'
            org.opencontainers.image.base.name=ghcr.io/kjanat/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}:${{ steps.version.outputs.VERSION_NO_V }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push multi-arch image
        id: push
        uses: docker/build-push-action@v6
        env:
          GIN_MODE: release
          SOURCE_DATE_EPOCH: ${{ steps.version.outputs.TIMESTAMP }}
        with:
          context: .
          file: .github/workflows/docker/Dockerfile.${{ matrix.packages }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-contexts: |
            golang:latest-alpine=docker-image://golang:${{ steps.version.outputs.GO_VERSION }}-alpine
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION_NO_V }}
            BUILD_TIME=${{ steps.version.outputs.COMMIT_DATE }}
            GIT_COMMIT=${{ github.sha }}
            GIT_TAG=${{ github.ref_name }}
            GIT_BRANCH=${{ github.ref }}
            LD_FLAGS=-s -w -X github.com/kjanat/chatlogger-api-go/internal/version.Version=${{ steps.version.outputs.VERSION_NO_V }} -X github.com/kjanat/chatlogger-api-go/internal/version.BuildTime=${{ steps.version.outputs.COMMIT_DATE }} -X github.com/kjanat/chatlogger-api-go/internal/version.GitCommit=${{ github.sha }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ github.event.repository.description }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        if: steps.push.outputs.digest != ''
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/kjanat/${{ env.IMAGE_PREFIX }}-${{ matrix.packages }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Sign the published Docker images
        if: steps.push.outputs.digest != '' && github.event_name != 'pull_request'
        id: sign
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          echo "Signing digest: ${DIGEST}"
          echo "Tags: ${TAGS}"
          images_to_sign=""
          IFS=$'\n'
          for tag in ${TAGS}; do
            if [[ -n "$tag" ]]; then
              images_to_sign+="${tag}@${DIGEST} "
            fi
          done
          unset IFS

          echo "Images to sign: ${images_to_sign}"
          if [[ -n "$images_to_sign" ]]; then
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images_to_sign}
          else
            echo "No images to sign."
          fi

      - name: Check images and verify signatures
        if: steps.push.outputs.digest != '' && github.event_name != 'pull_request'
        continue-on-error: true
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          echo "Verifying digest: ${DIGEST}"
          echo "Verifying tags: ${TAGS}"
          verification_failed=false
          IFS=$'\n'
          for tag in ${TAGS}; do
            if [[ -n "$tag" ]]; then
              echo "--- Verifying image: $tag ---"
              cosign verify-attestation --key cosign.pub $tag@${DIGEST}
              if [ $? -ne 0 ]; then
                echo "::warning::Provenance verification failed for $tag@${DIGEST}"
                verification_failed=true
              fi
              cosign verify --key cosign.pub $tag@${DIGEST}
              if [ $? -ne 0 ]; then
                echo "::warning::Signature verification failed for $tag@${DIGEST}"
                verification_failed=true
              else
                echo "Signature verified successfully for $tag@${DIGEST}"
              fi
            fi
          done
          unset IFS

          if [[ "$verification_failed" == true ]]; then
            echo "::error::One or more image verifications failed."
          else
            echo "All image verifications successful."
          fi

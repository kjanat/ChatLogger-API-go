name: ChatLogger Pipeline

on:
  push:
    branches: [master, development]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
    tags: ['v*'] # build when a tag is pushed

  pull_request:
    branches: [master, development]

  # manual version bump
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Which version part to bump'
        type: choice
        default: 'patch'
        options: [patch, minor, major]
      release_notes:
        description: 'Release notes/changes'
        type: string
        required: false

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -------- CI ---------------------------------------------------
  ci:
    name: Test & Lint
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod', cache: true }

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: false

      - name: Run Tests
        run: go test -v -race -coverprofile=coverage.txt ./...
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          files: coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}

  # -------- Deploy API documentation --------------------
  bump-sh:
    needs: [ci]
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    name: Deploy API documentation on Bump.sh
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy API documentation
        uses: bump-sh/github-action@v1
        with:
          doc: ${{ vars.BUMP_DOCID }}
          token: ${{ secrets.BUMP_TOKEN }}
          file: ${{ vars.BUMP_YAML_LOC }}
          branch: ${{ github.ref_name }}
          command: ${{ github.event_name == 'pull_request' && 'diff' || 'bump' }}
  
  # Call ./.github/workflows/codeql.yml
  codeql:
    name: CodeQL Advanced
    needs: [ci]
    if: github.event_name != 'pull_request'
    uses: ./.github/workflows/codeql.yml

  # -------- Release (tag push OR manual bump) --------------------
  release:
    name: Release
    needs: ci
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod', cache: true }

      # 1) import GPG and setup git
      - name: Import GPG key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup git
        run: |
          git config --global user.name  "${{ vars.ACTIONS_USERNAME }}"
          git config --global user.email "${{ secrets.ACTIONS_EMAIL }}"
          git config --global user.signingkey "${{ steps.gpg.outputs.fingerprint }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true

      - name: Get version
        id: version
        uses: ./.github/actions/get_version
        with:
          version-file: internal/version/version.go

      - name: Manual bump & tag
        id: manual_bump
        if: github.event_name == 'workflow_dispatch'
        run: |
          cp ./scripts/version.sh ${{ runner.temp }}/version.sh
          chmod +x ${{ runner.temp }}/version.sh
          ${{ runner.temp }}/version.sh "${{ github.event.inputs.version_type }}"
          NEW=$(grep -oP 'Version\s*=\s*"\K[^"]+' internal/version/version.go)

          # Construct a detailed commit message
          COMMIT_MSG="chore(release): bump ${{ github.event.inputs.version_type }} version to v${NEW}"

          # Add release notes if provided
          if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
            COMMIT_MSG="${COMMIT_MSG}\n\n${{ github.event.inputs.release_notes }}"
          fi

          git add internal/version/version.go
          git commit -S -m "$COMMIT_MSG"

          # Create a more detailed tag message
          TAG_MSG="Release v${NEW}: ${{ github.event.inputs.version_type }} version update"
          if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
            TAG_MSG="${TAG_MSG} ${{ github.event.inputs.release_notes }}"
          fi

          git tag -s "v${NEW}" -m "$TAG_MSG"
          git push --follow-tags origin HEAD "v${NEW}"

          echo "tag_created=true"  >> $GITHUB_OUTPUT
          echo "Created and pushed signed tag v${NEW}"

      # 3) auto-tag if version.go changed on master/dev
      - name: Ensure version tag exists
        id: ensure_tag
        if: github.event_name == 'push' && !startsWith(github.ref,'refs/tags/') # || steps.manual_bump.outputs.tag_created == 'true'
        run: |
          VER=$(grep -oP 'Version\s*=\s*"\K[^"]+' internal/version/version.go)
          [ -z "$VER" ] && { echo "::error ::unable to read version"; exit 1; }
          TAG=v${VER}
          if git show-ref --tags --verify "refs/tags/$TAG" -q; then
            echo "tag_created=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists."
          else
            git tag -s "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "tag_created=true"  >> $GITHUB_OUTPUT
            echo "Created and pushed signed tag $TAG"
          fi

      - name: Set up cosign
        uses: sigstore/cosign-installer@v3.8.2
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'

      # 4) GoReleaser â€“ run only if we *have* a tag
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'

        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          GPG_FINGERPRINT: ${{ steps.gpg.outputs.fingerprint }}
          DESCRIPTION: ${{ github.event.repository.description }}
          URL: ${{ github.server_url }}/${{ github.repository }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'
        with:
          name: chatlogger-api-${{ github.run_id }}
          path: dist/*
          retention-days: 1

  # -------- Docker images (builds per architecture) --------------------
  docker-build:
    name: Docker Build (${{ matrix.package }}, ${{ matrix.platform }})
    needs: [ci]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package: [server, worker]
        platform:
          - linux/amd64
          - linux/arm64
          - linux/riscv64
          - linux/ppc64le
          - linux/s390x
          - linux/386
          - linux/arm/v7
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Prepare platform string
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          
      - name: Docker Build & Push
        id: docker
        uses: ./.github/actions/docker
        with:
          PACKAGE: ${{ matrix.package }}
          IMAGE_PREFIX: chatlogger-api
          PLATFORM: ${{ matrix.platform }}
          DOCKER_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
          
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.docker.outputs.digest }}"
          echo "Digest: $digest"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.package }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  # -------- Create and push multi-platform manifests --------------------
  docker-manifest:
    name: Create Docker Manifest (${{ matrix.package }})
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        package: [server, worker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.package }}-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: ./.github/actions/get_version
        id: version
        with:
          version-file: internal/version/version.go

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_USERNAME }}/chatlogger-api-${{ matrix.package }}
            ghcr.io/${{ github.repository_owner }}/chatlogger-api-${{ matrix.package }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=schedule,pattern=nightly,enable=${{ github.ref == format('refs/heads/{0}', 'development') }}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version-no-v }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/tags/v0') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/tags/v0') }}
            type=raw,value=${{ steps.version.outputs.version-no-v }}
            type=sha,enable=true,format=short

      - name: List digest files
        run: |
          find ${{ runner.temp }}/digests -type f | sort

      - name: Create manifest list and push (Docker Hub)
        working-directory: ${{ runner.temp }}/digests
        run: |
          echo "Creating manifest for Docker Hub..."
          
          # Extract specific tags from metadata
          VERSION_TAG=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[] | select(contains(":sha-") | not) | select(contains("ghcr.io") | not) | split(":")[1]' | head -n1)
          SHA_TAG=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[] | select(contains(":sha-")) | select(contains("ghcr.io") | not) | split(":")[1]' | head -n1)
          
          echo "Using tags: $VERSION_TAG $SHA_TAG"
          
          # Create the manifest with all digest files
          DIGESTS=$(find . -type f -name "*" | sort)
          if [ -n "$DIGESTS" ]; then
            echo "Found digest files: $DIGESTS"
            VALID_DIGEST_ARGS=""
            
            for file in $DIGESTS; do
              DIGEST_NAME=$(basename $file)
              DIGEST_REF="${{ vars.DOCKERHUB_USERNAME }}/chatlogger-api-${{ matrix.package }}@sha256:$DIGEST_NAME"
              
              # Verify the digest exists in Docker Hub before adding it
              if docker buildx imagetools inspect "$DIGEST_REF" &>/dev/null; then
                echo "âœ“ Verified digest exists: $DIGEST_REF"
                VALID_DIGEST_ARGS="$VALID_DIGEST_ARGS $DIGEST_REF"
              else
                echo "âœ— Digest not found, skipping: $DIGEST_REF"
              fi
            done
            
            if [ -z "$VALID_DIGEST_ARGS" ]; then
              echo "No valid digests found! Exiting."
              exit 1
            fi
            
            echo "Creating manifest with arguments: $VALID_DIGEST_ARGS"
            
            # Create version tag manifest
            docker buildx imagetools create -t ${{ vars.DOCKERHUB_USERNAME }}/chatlogger-api-${{ matrix.package }}:$VERSION_TAG $VALID_DIGEST_ARGS
            
            # Create sha tag manifest
            if [ -n "$SHA_TAG" ]; then
              docker buildx imagetools create -t ${{ vars.DOCKERHUB_USERNAME }}/chatlogger-api-${{ matrix.package }}:$SHA_TAG $VALID_DIGEST_ARGS
            fi
            
            # Create latest tag if on tagged commit
            if [ "${{ startsWith(github.ref, 'refs/tags/v') }}" = "true" ]; then
              docker buildx imagetools create -t ${{ vars.DOCKERHUB_USERNAME }}/chatlogger-api-${{ matrix.package }}:latest $VALID_DIGEST_ARGS
            fi
          else
            echo "No digest files found!"
            exit 1
          fi

      - name: Create manifest list and push (GHCR)
        working-directory: ${{ runner.temp }}/digests
        run: |
          echo "Creating manifest for GitHub Container Registry..."
          
          # Extract specific tags from metadata
          VERSION_TAG=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[] | select(contains(":sha-") | not) | select(contains("ghcr.io")) | split(":")[1]' | head -n1)
          SHA_TAG=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.tags[] | select(contains(":sha-")) | select(contains("ghcr.io")) | split(":")[1]' | head -n1)
          
          echo "Using tags: $VERSION_TAG $SHA_TAG"
          
          # Create the manifest with all digest files
          DIGESTS=$(find . -type f -name "*" | sort)
          if [ -n "$DIGESTS" ]; then
            echo "Found digest files: $DIGESTS"
            VALID_DIGEST_ARGS=""
            
            for file in $DIGESTS; do
              DIGEST_NAME=$(basename $file)
              DIGEST_REF="ghcr.io/${{ github.repository_owner }}/chatlogger-api-${{ matrix.package }}@sha256:$DIGEST_NAME"
              
              # Verify the digest exists in GHCR before adding it
              if docker buildx imagetools inspect "$DIGEST_REF" &>/dev/null; then
                echo "âœ“ Verified digest exists: $DIGEST_REF"
                VALID_DIGEST_ARGS="$VALID_DIGEST_ARGS $DIGEST_REF"
              else
                echo "âœ— Digest not found, skipping: $DIGEST_REF"
              fi
            done
            
            if [ -z "$VALID_DIGEST_ARGS" ]; then
              echo "No valid digests found! Exiting."
              exit 1
            fi
            
            echo "Creating manifest with arguments: $VALID_DIGEST_ARGS"
            
            # Create version tag manifest
            docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/chatlogger-api-${{ matrix.package }}:$VERSION_TAG $VALID_DIGEST_ARGS

            # Create sha tag manifest
            if [ -n "$SHA_TAG" ]; then
              docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/chatlogger-api-${{ matrix.package }}:$SHA_TAG $VALID_DIGEST_ARGS
            fi
            
            # Create latest tag if on tagged commit
            if [ "${{ startsWith(github.ref, 'refs/tags/v') }}" = "true" ]; then
              docker buildx imagetools create -t ghcr.io/${{ github.repository_owner }}/chatlogger-api-${{ matrix.package }}:latest $VALID_DIGEST_ARGS
            fi
          else
            echo "No digest files found!"
            exit 1
          fi

      - name: Inspect images
        run: |
          echo "Inspecting Docker Hub image..."
          docker buildx imagetools inspect ${{ vars.DOCKERHUB_USERNAME }}/chatlogger-api-${{ matrix.package }}:${{ steps.version.outputs.version-no-v }}
          
          echo "Inspecting GitHub Container Registry image..."
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/chatlogger-api-${{ matrix.package }}:${{ steps.version.outputs.version-no-v }}

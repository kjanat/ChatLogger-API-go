name: ChatLogger Pipeline

on:
  push:
    branches: [master, development]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
    tags: ['v*'] # build when a tag is pushed

  pull_request:
    branches: [master, development]

  # manual version bump
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Which version part to bump'
        type: choice
        default: 'patch'
        options: [patch, minor, major]
      release_notes:
        description: 'Release notes/changes'
        type: string
        required: false

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }} #-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -------- CI ---------------------------------------------------
  ci:
    name: Test & Lint
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod', cache: true }

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: false

      - name: Run Tests
        run: go test -v -race -coverprofile=coverage.txt ./...
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          files: coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}

  # -------- Deploy API documentation --------------------
  bump-sh:
    needs: [ci]
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    name: Deploy API documentation on Bump.sh
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy API documentation
        uses: bump-sh/github-action@v1
        with:
          doc: ${{ vars.BUMP_DOCID }}
          token: ${{ secrets.BUMP_TOKEN }}
          file: ${{ vars.BUMP_YAML_LOC }}
          branch: ${{ github.ref_name }}
          command: ${{ github.event_name == 'pull_request' && 'diff' || 'bump' }}

  codeql:
    name: CodeQL
    needs: [ci]
    if: github.event_name != 'pull_request'
    permissions:
        actions: read
        contents: read
        packages: read
        security-events: write
    uses: ./.github/workflows/codeql.yml

  # -------- Release (tag push OR manual bump) --------------------
  release:
    name: Release
    needs: ci
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod', cache: true }

      # 1) import GPG and setup git
      - name: Import GPG key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup git
        run: |
          git config --global user.name  "${{ vars.ACTIONS_USERNAME }}"
          git config --global user.email "${{ secrets.ACTIONS_EMAIL }}"
          git config --global user.signingkey "${{ steps.gpg.outputs.fingerprint }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true

      - name: Get version
        id: version
        uses: ./.github/actions/get_version
        with:
          version-file: internal/version/version.go

      - name: Manual bump & tag
        id: manual_bump
        if: github.event_name == 'workflow_dispatch'
        run: |
          cp ./scripts/version.sh ${{ runner.temp }}/version.sh
          chmod +x ${{ runner.temp }}/version.sh
          ${{ runner.temp }}/version.sh "${{ github.event.inputs.version_type }}"
          NEW=$(grep -oP 'Version\s*=\s*"\K[^"]+' internal/version/version.go)

          # Construct a detailed commit message
          COMMIT_MSG="chore(release): bump ${{ github.event.inputs.version_type }} version to v${NEW}"

          # Add release notes if provided
          if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
            COMMIT_MSG="${COMMIT_MSG}\n\n${{ github.event.inputs.release_notes }}"
          fi

          git add internal/version/version.go
          git commit -S -m "$COMMIT_MSG"

          # Create a more detailed tag message
          TAG_MSG="Release v${NEW}: ${{ github.event.inputs.version_type }} version update"
          if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
            TAG_MSG="${TAG_MSG} ${{ github.event.inputs.release_notes }}"
          fi

          git tag -s "v${NEW}" -m "$TAG_MSG"
          git push --follow-tags origin HEAD "v${NEW}"

          echo "tag_created=true"  >> $GITHUB_OUTPUT
          echo "Created and pushed signed tag v${NEW}"

      # 3) auto-tag if version.go changed on master/dev
      - name: Ensure version tag exists
        id: ensure_tag
        if: github.event_name == 'push' && !startsWith(github.ref,'refs/tags/') # || steps.manual_bump.outputs.tag_created == 'true'
        run: |
          VER=$(grep -oP 'Version\s*=\s*"\K[^"]+' internal/version/version.go)
          [ -z "$VER" ] && { echo "::error ::unable to read version"; exit 1; }
          TAG=v${VER}
          if git show-ref --tags --verify "refs/tags/$TAG" -q; then
            echo "tag_created=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists."
          else
            git tag -s "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "tag_created=true"  >> $GITHUB_OUTPUT
            echo "Created and pushed signed tag $TAG"
          fi

      - name: Set up cosign
        uses: sigstore/cosign-installer@v3.8.2
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'

      # 4) GoReleaser – run only if we *have* a tag
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'

        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          GPG_FINGERPRINT: ${{ steps.gpg.outputs.fingerprint }}
          DESCRIPTION: ${{ github.event.repository.description }}
          URL: ${{ github.server_url }}/${{ github.repository }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'
        with:
          name: chatlogger-api-${{ github.run_id }}
          path: dist/*
          retention-days: 1

  # -------- Docker images (builds per architecture) --------------------
  docker-build:
    name: Docker Build (${{ matrix.package }}, ${{ matrix.platform }})
    needs: [ci]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package: [server, worker]
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/ppc64le
          - linux/riscv64
          - linux/s390x
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare platform string
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker Build & Push
        id: docker
        uses: ./.github/actions/docker
        with:
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKER_USERNAME: kjanat
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_PREFIX: chatlogger-api
          PACKAGE: ${{ matrix.package }}
          PLATFORM: ${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.docker.outputs.digest }}"
          echo "Digest: $digest"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.package }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  # -------- Create and push multi-platform manifests --------------------
  docker-manifest:
    name: Create Docker Manifest (${{ matrix.package }})
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package: [server, worker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.package }}-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: kjanat
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        uses: ./.github/actions/get_version
        id: version
        with:
          version-file: internal/version/version.go

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            kjanat/chatlogger-api-${{ matrix.package }}
            ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}
          flavor: |
            latest=auto
          tags: |
            # Release version tags (when tagged)
            type=semver,pattern={{version}},enable=true,priority=1000
            type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }},priority=900
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }},priority=800
            
            # Branch-based tags
            type=ref,event=branch,enable=${{ github.ref == format('refs/heads/{0}', 'master') }},priority=600
            
            # Pull request tags
            type=ref,event=pr,priority=500
            
            # Scheduled builds (nightly)
            type=schedule,pattern=nightly,enable=true,priority=400
            type=schedule,pattern=nightly-{{date 'YYYYMMDD'}},enable=true,priority=300
            
            # Short SHA for all builds (always available)
            type=sha,format=short,prefix=,enable=true,priority=100
            
            # Ensure latest tag has highest priority to appear at the top of the list
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') || startsWith(github.ref, 'refs/tags/v') }},priority=1100

      - name: List digest files
        run: |
          find ${{ runner.temp }}/digests -type f | sort

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}@sha256:%s ' *)
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'kjanat/chatlogger-api-${{ matrix.package }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect kjanat/chatlogger-api-${{ matrix.package }}:${{ steps.meta.outputs.version }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.2

      - name: Sign the published Docker images
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "🔐 Signing tags for matrix package: ${{ matrix.package }}"

          # First sign versioned tags (which will create the SHA signatures)
          VERSION_TAG="kjanat/chatlogger-api-${{ matrix.package }}:${{ steps.version.outputs.version-no-v }}"
          GHCR_VERSION_TAG="ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}:${{ steps.version.outputs.version-no-v }}"
          echo "📦 Signing version tag: $VERSION_TAG"
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "$VERSION_TAG"
          echo "📦 Signing GHCR version tag: $GHCR_VERSION_TAG"
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "$GHCR_VERSION_TAG"

          # Then push latest tags separately *after* the version tags are signed
          # This should make them appear at the top of the package list
          docker tag "$VERSION_TAG" "kjanat/chatlogger-api-${{ matrix.package }}:latest"
          docker push "kjanat/chatlogger-api-${{ matrix.package }}:latest"
          docker tag "$GHCR_VERSION_TAG" "ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}:latest"
          docker push "ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}:latest"

          # Sign the latest tags last
          echo "📦 Signing latest tag"
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "kjanat/chatlogger-api-${{ matrix.package }}:latest"
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}:latest"

          echo "✅ Done signing tags"

      - name: Sign digest-based manifest references
        if: false
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "🔐 Signing digests for multi-platform manifest: ${{ matrix.package }}"

          cd "${{ runner.temp }}/digests"

          for digest_file in *; do
            digest="sha256:$digest_file"
            echo "📦 Signing digest: kjanat/chatlogger-api-${{ matrix.package }}@$digest"
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY "kjanat/chatlogger-api-${{ matrix.package }}@$digest"

            echo "📦 Signing digest: ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}@$digest"
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY "ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}@$digest"
          done

          echo "✅ Done signing all digests"

      - name: Verify signed images (tags)
        run: |
          # Additional logging for verification
          echo "🔍 Verifying signed tag"
          for digest_file in *; do
            digest="sha256:$digest_file"
            cosign verify --key=https://raw.githubusercontent.com/kjanat/chatlogger-api-go/master/cosign.pub "kjanat/chatlogger-api-${{ matrix.package }}:latest"
            cosign verify --key=https://raw.githubusercontent.com/kjanat/chatlogger-api-go/master/cosign.pub "ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}:latest"
          done

          echo "✅ All digest-based manifest references verified"

      - name: Verify signed images (digest)
        if: false
        run: |
          # Additional logging for verification
          echo "🔍 Verifying signed digests..."
          for digest_file in *; do
            digest="sha256:$digest_file"
            cosign verify --key=https://raw.githubusercontent.com/kjanat/chatlogger-api-go/master/cosign.pub "kjanat/chatlogger-api-${{ matrix.package }}@$digest"
            cosign verify --key=https://raw.githubusercontent.com/kjanat/chatlogger-api-go/master/cosign.pub "ghcr.io/kjanat/chatlogger-api-${{ matrix.package }}@$digest"
          done

          echo "✅ All digest-based manifest references verified"

name: ChatLogger Pipeline

on:
  push:
    branches: [master, development]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
    tags: ['v*'] # build when a tag is pushed

  pull_request:
    branches: [master, development]

  # manual version bump
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Which version part to bump'
        type: choice
        default: 'patch'
        options: [patch, minor, major]
      release_notes:
        description: 'Release notes/changes'
        type: string
        required: false

permissions: # default
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # for manual bump (no PRs)

# ───────────────────────────────────────────────────────────────
jobs:
  # lint:
  #   name: Lint Code Base
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with: { fetch-depth: 0 }

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version-file: go.mod

  #     - name: Run Super-Linter
  #       uses: super-linter/super-linter/slim@4e8a7c2bf106c4c766c816b35ec612638dc9b6b2 # v7.3.0
  #       env:
  #         VALIDATE_ALL_CODEBASE: true
  #         DEFAULT_BRANCH: "master"
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         VALIDATE_GO: false
  #         VALIDATE_JSCPD: false
  #         VALIDATE_JSON: false
  #         VALIDATE_JSON_PRETTIER: false
  #         LINTER_RULES_PATH: .github/linters
  #         GOLANGCI_LINT_CONFIG: .golangci.yml
  #         VALIDATE_YAML_PRETTIER: false
  # -------- CI ---------------------------------------------------
  ci:
    name: Test & Lint
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod', cache: true }

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: false

      - name: Run Tests
        run: go test -v -race -coverprofile=coverage.txt ./...
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          files: coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}

  # -------- Deploy API documentation --------------------
  bump-sh:
    needs: [ci, release]
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    name: Deploy API documentation on Bump.sh
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy API documentation
        uses: bump-sh/github-action@v1
        with:
          doc: ${{ vars.BUMP_DOCID }}
          token: ${{ secrets.BUMP_TOKEN }}
          file: ${{ vars.BUMP_YAML_LOC }}
          branch: ${{ github.ref_name }}
          command: ${{ github.event_name == 'pull_request' && 'diff' || 'bump' }}

  # -------- Release (tag push OR manual bump) --------------------
  release:
    name: Release
    needs: ci
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version-file: 'go.mod', cache: true }

      # 1) import GPG and setup git
      - name: Import GPG key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup git
        run: |
          git config --global user.name  "${{ vars.ACTIONS_USERNAME }}"
          git config --global user.email "${{ secrets.ACTIONS_EMAIL }}"
          git config --global user.signingkey "${{ steps.gpg.outputs.fingerprint }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true

      - name: Get version
        id: version
        uses: ./.github/actions/version
        with:
          version-file: internal/version/version.go

      - name: Manual bump & tag
        id: manual_bump
        if: github.event_name == 'workflow_dispatch'
        run: |
          cp ./scripts/version.sh ${{ runner.temp }}/version.sh
          chmod +x ${{ runner.temp }}/version.sh
          ${{ runner.temp }}/version.sh "${{ github.event.inputs.version_type }}"
          NEW=$(grep -oP 'Version = "\K[^"]+' internal/version/version.go)

          # Construct a detailed commit message
          COMMIT_MSG="chore(release): bump ${{ github.event.inputs.version_type }} version to v${NEW}"

          # Add release notes if provided
          if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
            COMMIT_MSG="${COMMIT_MSG}\n\n${{ github.event.inputs.release_notes }}"
          fi

          # Add reference to the workflow run
          COMMIT_MSG="${COMMIT_MSG} Triggered by workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          git add internal/version/version.go
          git commit -S -m "$COMMIT_MSG"

          # Create a more detailed tag message
          TAG_MSG="Release v${NEW}: ${{ github.event.inputs.version_type }} version update"
          if [ ! -z "${{ github.event.inputs.release_notes }}" ]; then
            TAG_MSG="${TAG_MSG} ${{ github.event.inputs.release_notes }}"
          fi

          git tag -s "v${NEW}" -m "$TAG_MSG"
          git push --follow-tags origin HEAD "v${NEW}"

          echo "tag_created=true"  >> $GITHUB_OUTPUT
          echo "Created and pushed signed tag v${NEW}"

      # 3) auto-tag if version.go changed on master/dev
      - name: Ensure version tag exists
        id: ensure_tag
        if: github.event_name == 'push' && !startsWith(github.ref,'refs/tags/') # || steps.manual_bump.outputs.tag_created == 'true'
        run: |
          VER=$(grep -oP 'Version = "\K[^"]+' internal/version/version.go)
          [ -z "$VER" ] && { echo "::error ::unable to read version"; exit 1; }
          TAG=v${VER}
          if git show-ref --tags --verify "refs/tags/$TAG" -q; then
            echo "tag_created=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists."
          else
            git tag -s "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "tag_created=true"  >> $GITHUB_OUTPUT
            echo "Created and pushed signed tag $TAG"
          fi

      - name: Set up cosign
        uses: sigstore/cosign-installer@v3.8.2
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'

      # 4) GoReleaser – run only if we *have* a tag
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'

        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          GPG_FINGERPRINT: ${{ steps.gpg.outputs.fingerprint }}
          DESCRIPTION: ${{ github.event.repository.description }}
          URL: ${{ github.server_url }}/${{ github.repository }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: |
          startsWith(github.ref,'refs/tags/v') ||
          steps.manual_bump.outputs.tag_created == 'true' ||
          steps.ensure_tag.outputs.tag_created == 'true'
        with:
          name: chatlogger-api-${{ github.run_id }}
          path: dist/*
          retention-days: 1

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [ci, release]
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: true
      matrix:
        package: [server, worker]
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - uses: ./.github/actions/docker
        with:
          PACKAGE: ${{ matrix.package }}
          IMAGE_PREFIX: chatlogger-api
          PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7,linux/386,linux/ppc64le,linux/s390,linux/arm/v6,linux/loongarch6,linux/riscv64
        # secrets:
        #   TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        #   DOCKERHUB_TOKEN: '${{ secrets.DOCKERHUB_TOKEN }}'
        #   COSIGN_PASSWORD: '${{ secrets.COSIGN_PASSWORD }}'
        #   COSIGN_PRIVATE_KEY: '${{ secrets.COSIGN_PRIVATE_KEY }}'
